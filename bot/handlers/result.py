
import os
import json
import logging
from typing import Optional

from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from bot.services.media import make_image
from bot.services.scoring import calc_scores, get_totem_animal

router = Router()
logger = logging.getLogger("zoobot.result")

ANIMALS_PATH = os.path.join("data", "animals.json")
with open(ANIMALS_PATH, encoding="utf-8") as f:
    ANIMALS = json.load(f)


async def show_result(message: types.Message, state: FSMContext):

    data = await state.get_data()
    answers = data.get("answers", [])

    scores = calc_scores(answers)
    top = get_totem_animal(scores)
    if top is None:
        await message.answer("–£–≤—ã, –í–∞—à —Ç–æ—Ç–µ–º –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        await state.clear()
        return

    totem_animal_key, totem_animal_score = top
    animal = ANIMALS.get(totem_animal_key)
    if not animal:
        logger.error(f"totem_animal key '{totem_animal_key}' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ animals.json")
        await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... –ù–∞–º –∂–∞–ª—å")
        await state.clear()
        return

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id={message.from_user.id} ‚Äî —Ç–æ—Ç–µ–º: {animal['name']} ({totem_animal_score} –æ—á–∫–æ–≤)")

    image_path: Optional[str]
    try:
        image_path = await make_image(
            image_path=animal["image"],
            animal_name=animal["name"],
            user_name=message.from_user.first_name
        )
    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏—Ç–æ–≥–æ–≤–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏")
        image_path = None

    caption = (
        f"üéâ *–í–∞—à–µ —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ ‚Äî {animal['name']}!*\n\n"
        f"_{animal['description']}_\n\n"
        f"[–ù–µ –æ—Å—Ç–∞–≤—å—Ç–µ —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥—É—à–∏ –±–µ–∑ –æ–ø–µ–∫–∏]({animal['guardian_link']})"
    )

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑", callback_data="start_quiz")],
        [InlineKeyboardButton(text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è", callback_data=f"share_{totem_animal_key}")],
        [InlineKeyboardButton(text="–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data="feedback")],
        [InlineKeyboardButton(text="–°–≤—è–∑–∞—Ç—å—Å—è —Å –∑–æ–æ–ø–∞—Ä–∫–æ–º", callback_data=f"contact_{totem_animal_key}")]
    ])

    if image_path:
        await message.answer_photo(
            photo=types.FSInputFile(image_path),
            caption=caption,
            parse_mode="Markdown",
            reply_markup=kb
        )
    else:
        await message.answer(caption, parse_mode="Markdown", reply_markup=kb)

    await state.clear()
